#!/usr/bin/env bash
#
# CONTAINER
# A tool that builds and runs docker containers.
#
# Author JT Paasch
# License MIT <http://opensource.org/licenses/MIT>
#

# A function to explain usage.
function usage {
    echo "NAME"
    echo "  container"
    echo ""
    echo "DESCRIPTION"
    echo "  A tool that builds and runs docker containers."
    echo ""
    echo "COMMANDS"
    echo "  build    Build a container image."
    echo "  destroy  Destroy a container image."
    echo "  start    Start a container."
    echo "  stop     Stop a container."
    echo "  list     List all container images."
    echo "  ps       List all running containers."
    echo "  ip       Get the IP address of a running container."
    echo "  info     Get info about a running container."
    echo "  logs     Tail the logs of a container."
    echo ""
    echo "HELP"
    echo "  -h --help help    Display this help/usage screen."
    echo "  <command> --help  Display help/usage for <command>"
    echo ""
}

# A function that explains how to get help.
function helphint {
    if (( "$#" )); then
        echo "Try: $PROGRAM $@ --help"
    else
        echo "Try: $PROGRAM --help"
    fi
}

# A function that gets the full path for a location.
function absolute_path {
    ORIGINAL_PWD=`pwd`
    if [[ ! -z $1 ]]; then
	cd $1
    fi
    echo `pwd`
    cd $ORIGINAL_PWD
}

# A function that handles the "list" command.
function list {

    # Step through the arguments.
    while (( "$#" )); do
        case $1 in

            # The 'help' option: displays help/usage.
            -h|--help|help)  HELP="true"
                             ;;

            # Anything else is unrecognized.
            *)               echo "Unrecognized option: $1"
                             helphint $COMMAND
                             exit 1
                             ;;

        esac
        shift
    done

    # Display the help/usage?
    if [[ "$HELP" == "true" ]]; then
        echo "USAGE"
        echo "  $PROGRAM $COMMAND"
        echo ""
        echo "DESCRIPTION"
        echo "  Lists all built container images."
        exit 1
     fi

    # Get the list of container images from docker.
    set -x
    docker images
    { set +x; } 2>/dev/null

}

# A function that handles the "ps" command.
function ps {

    # Step through the arguments.
    while (( "$#" )); do
        case $1 in

            # The 'help' option: displays help/usage.
            -h|--help|help)  HELP="true"
                             ;;

            # The '--all' option: include stopped containers too.
            -a|--all)        INCLUDE_STOPPED=" -a"
                             ;;

            # Anything else is unrecognized.
            *)               echo "Unrecognized option: $1"
                             helphint $COMMAND
                             exit 1
                             ;;

        esac
        shift
    done

    # Display the help/usage?
    if [[ "$HELP" == "true" ]]; then
        echo "USAGE"
        echo "  $PROGRAM $COMMAND"
        echo ""
        echo "DESCRIPTION"
        echo "  Lists all running containers."
        echo ""
        echo "OPTIONS"
        echo "  -a --all  Include containers that have stopped."
        exit 1
    fi

    # Get the list of all containers. 
    set -x
    docker ps $INCLUDE_STOPPED
    { set +x; } 2>/dev/null

}

# A function that handles the "ip" command.
function ip {

    # Step through the arguments.
    while (( "$#" )); do
        case $1 in

            # The 'help' option: displays help/usage.
            -h|--help|help)  HELP="true"
                             ;;

            # Anything else must be the name in "$PROGRAM ip <name>."
            # But only the first time we encounter it. If we encounter
            # another argument, it's unrecognized. 
            *)               if [[ -z $NAME ]]; then
                                 NAME=$1
                             else
                                 echo "Unrecognized option: $1"
                                 helphint $COMMAND
                                 exit 1
                             fi
                             ;;

        esac
        shift
    done

    # Display the help/usage?
    if [[ "$HELP" == "true" ]]; then
        echo "USAGE"
        echo "  $PROGRAM $COMMAND <name>"
        echo ""
        echo "DESCRIPTION"
        echo "  Get the IP address of a container."
        echo ""
        echo "OPTIONS"
        echo "  <name>  The name of the container."
        exit 1
    fi

    # We need the name of a container, if we want to get its IP.
    if [[ -z $NAME ]]; then
        echo "Specify a container name: $PROGRAM ip <name>"
        helphint
        exit 1
    fi

    # Docker image names are in the form "repo:tag". Let's split on the
    # colon and get both. If there's no tag, docker defaults to "latest".
    IFS=':' read REPO TAG <<< "$NAME"
    if [[ -z $TAG ]]; then
        TAG='latest'
    fi

    # Run "inspect" and pull out the IP address.
    set -x
    docker inspect --format '{{.NetworkSettings.IPAddress}}' "${REPO}_${TAG}"
    { set +x; } 2>/dev/null

}

# A function to handle the "info" command.
function info {

    # Step through the arguments.
    while (( "$#" )); do
        case $1 in

            # The 'help' option: displays help/usage.
            -h|--help|help)  HELP="true"
                             ;;

            # Anything else must be the name in "$PROGRAM info <name>."
            # But only the first time we encounter it. If we encounter
            # another argument, it's unrecognized. 
            *)               if [[ -z $NAME ]]; then
                                 NAME=$1
                             else
                                 echo "Unrecognized option: $1"
                                 helphint $COMMAND
                                 exit 1
                             fi
                             ;;

        esac
        shift
    done

    # Display the help/usage?
    if [[ "$HELP" == "true" ]]; then
        echo "USAGE"
        echo "  $PROGRAM $COMMAND <name>"
        echo ""
        echo "DESCRIPTION"
        echo "  Get info about a container."
        echo ""
        echo "OPTIONS"
        echo "  <name>  The name of the container."
        exit 1
    fi

    # We need the name of a container, if we want to get its info.
    if [[ -z $NAME ]]; then
        echo "Specify a container name: $PROGRAM info <name>"
        helphint
        exit 1
    fi

    # Docker image names are in the form "repo:tag". Let's split on the
    # colon and get both. If there's no tag, docker defaults to "latest".
    IFS=':' read REPO TAG <<< "$NAME"
    if [[ -z $TAG ]]; then
        TAG='latest'
    fi

    # Run "inspect" and get all data.
    set -x
    docker inspect "${REPO}_${TAG}"
    { set +x; } 2>/dev/null

}

# A function to handle the "logs" command.
function logs {

    # Step through the arguments.
    while (( "$#" )); do
        case $1 in

            # The 'help' option: displays help/usage.
            -h|--help|help)  HELP="true"
                             ;;

            # Anything else must be the name in "$PROGRAM logs <name>."
            # But only the first time we encounter it. If we encounter
            # another argument, it's unrecognized. 
            *)               if [[ -z $NAME ]]; then
                                 NAME=$1
                             else
                                 echo "Unrecognized option: $1"
                                 helphint $COMMAND
                                 exit 1
                             fi
                             ;;

        esac
        shift
    done

    # Display the help/usage?
    if [[ "$HELP" == "true" ]]; then
        echo "USAGE"
        echo "  $PROGRAM $COMMAND <name>"
        echo ""
        echo "DESCRIPTION"
        echo "  Tail the logs of a container."
        echo ""
        echo "OPTIONS"
        echo "  <name>  The name of the container."
        exit 1
    fi

    # We need the name of a container, if we want to tail its logs.
    if [[ -z $NAME ]]; then
        echo "Specify a container name: $PROGRAM logs <name>"
        helphint
        exit 1
    fi

    # Docker image names are in the form "repo:tag". Let's split on the
    # colon and get both. If there's no tag, docker defaults to "latest".
    IFS=':' read REPO TAG <<< "$NAME"
    if [[ -z $TAG ]]; then
        TAG='latest'
    fi

    # Run the "docker logs" command.
    # Note: The logs are kept on the docker host at: 
    # /var/lib/docker/containers/<image-id>/<image-id>-json.log
    # The whole <image-id> folder is deleted when the container is deleted.
    set -x
    docker logs --follow "${REPO}_${TAG}"
    { set +x; } 2>/dev/null

}

# A function to handle the "build" command.
function build {

    # If no options were specified, raise an error and exit.
    if [[ "$#" == "0" ]]; then
        echo "No build options specified."
        helphint $COMMAND
        exit 1
    fi

    # Go through the options.
    while (( "$#" )); do
        case $1 in

            # The help option.
            -h|--help|help)  HELP="true"
                             ;;

            # The --from option. There can only be one of these.
            --from)          if [[ -z $BUILD_DIR ]]; then
                                 shift
                                 BUILD_DIR=$1
                             else
                                 echo "Specify --from only once."
                                 helphint $COMMAND
                                 exit 1
                             fi
                             ;;

            # The --dockerfile option.
            --dockerfile)    if [[ -z $DOCKERFILE ]]; then
                                 shift
                                 DOCKERFILE=$1
                             else
                                 echo "Specify only one --dockerfile."
                                 helphint $COMMAND
                                 exit 1
                             fi
                             ;;

            # The first positional argument should be the name.
            # Anything else is unrecognized. 
            *)               if [[ -z $NAME ]]; then
                                 NAME=$1
                             else
                                 echo "Unrecognized option: $1"
                                 helphint $COMMAND
                                 exit 1
                             fi
                             ;;

        esac
        shift
    done

    # Display the help/usage?
    if [[ "$HELP" == "true" ]]; then
        echo "USAGE"
        echo "  $PROGRAM $COMMAND <name> --from <build-dir> [OPTIONS]"
        echo ""
        echo "DESCRIPTION"
        echo "  Builds a container called <name> from the <build-dir>."
        echo "  A Dockerfile is assumed to exist in the <build-dir>. If not,"
        echo "  specify its location with the --dockerfile. The file must be"
        echo "  somewhere under the <build-dir>. All paths should be absolute."
        echo ""
        echo "OPTIONS"
        echo "  <name>              The name of the container."
        echo "  --from <build-dir>  The build context. Required."
        echo "  --dockerfile        The Dockerfile path, if not <build-dir>."
        exit 1
    fi

    # There must be a name for the image.
    if [[ -z $NAME ]]; then
        echo "Specify a name, e.g. $PROGRAM $COMMAND db"
        helphint $COMMAND
        exit 1
    fi

    # Docker image names are in the form "repo:tag". Let's split on the
    # colon and get both. If there's no tag, docker defaults to "latest".
    IFS=':' read REPO TAG <<< "$NAME"
    if [[ -z $TAG ]]; then
        TAG='latest'
    fi

    # If no build directory is set, default to the current directory.
    if [[ -z $BUILD_DIR ]]; then
        BUILD_DIR='.'
    fi

    # Remove any trailing slash.
    BUILD_DIR=${BUILD_DIR%/}

    # Get the absolute/full path of the build directory.
    BUILD_DIR=`absolute_path $BUILD_DIR`

    # Assume 'Dockerfile' if no DOCKERFILE is specified.
    if [[ -z $DOCKERFILE ]]; then
        DOCKERFILE=$BUILD_DIR'/Dockerfile'
    fi

    # Try to delete the image (in case it exists already).
    echo "Deleting image $REPO:$TAG if it exists"
    docker rmi $REPO:$TAG >/dev/null

    # Now build the image fresh.
    set -x
    docker build \
           --force-rm=true \
           --no-cache=true \
           --file=$DOCKERFILE \
           -t $REPO:$TAG \
           $BUILD_DIR
    { set +x; } 2>/dev/null

}

# A function to handle the "destroy" command.
function destroy {

    # If no options were specified, raise an error and exit.
    if [[ "$#" == "0" ]]; then
        echo "No destroy options specified."
        helphint $COMMAND
        exit 1
    fi

    # Go through the options.
    while (( "$#" )); do
        case $1 in

            # The help option.
            -h|--help|help)  HELP="true"
                             ;;

            # Any unrecognized options (starting with a dash).
            -*)              echo "Unrecognized option: $1"
                             helphint $COMMAND
                             exit 1
                             ;;

            # Anything else must be the NAME. But only the first time
            # we encounter it. A second option is unrecognized.
            *)               if [[ -z $NAME ]]; then
                                 NAME=$1
                             else
                                 echo "Unrecognized option: $1"
                                 helphint $COMMAND
                                 exit 1
                             fi
                             ;;

        esac
        shift
    done

    # Display the help/usage?
    if [[ "$HELP" == "true" ]]; then
        echo "USAGE"
        echo "  $PROGRAM $COMMAND <name>"
        echo ""
        echo "DESCRIPTION"
        echo "  Destroys a container."
        echo ""
        echo "OPTIONS"
        echo "  <name>              The name of the container."
        exit 1
    fi

    # We need to know which image to destroy.
    if [[ -z $NAME ]]; then
        echo "Specify a container to destroy, e.g. $PROGRAM $COMMAND db"
        helphint $COMMAND
        exit 1
    fi

    # Docker image names are in the form "repo:tag". Let's split on the
    # colon and get both. If there's no tag, docker defaults to "latest".
    IFS=':' read REPO TAG <<< "$NAME"
    if [[ -z $TAG ]]; then
        TAG='latest'
    fi

    # Now destroy the container.
    set -x
    docker rmi -f $REPO:$TAG
    { set +x; } 2>/dev/null

}

# Handle the "start" command.
function start {

    # If no options were specified, raise an error and exit.
    if [[ "$#" == "0" ]]; then
        echo "No start options specified."
        helphint $COMMAND
        exit 1
    fi

    # Go through the options.
    while (( "$#" )); do
        case $1 in

            # The help option.
            -h|--help|help)  HELP="true"
                             ;;

            # The --volume option. There can be many of these,
            # so we want to add them to an array.
            -v|--volume)     shift
                             if [ -z $VOLUMES ]; then
                                 VOLUMES=("$1")
                             else
                                 VOLUMES=("$VOLUMES" "$1")
                             fi
                             ;;

            # The --port option. There can be many of these too,
            # so we want to add them to an array.
            -p|--port)       shift
                             if [ -z $PORTS ]; then
                                 PORTS=("$1")
                             else
                                 PORTS=("$PORTS" "$1")
                             fi
                             ;;

            # The --link option. There can be many of these as well,
            # so we want to add them to an array.
            -l|--link)       shift
                             if [ -z $LINKS ]; then
                                 LINKS=("$1")
                             else
                                 LINKS=("$LINKS" "$1")
                             fi
                             ;;

            # Anything else must be the NAME. But only the first time
            # we encounter it. A second option is unrecognized.
            *)               if [[ -z $NAME ]]; then
                                 NAME=$1
                             else
                                 echo "Unrecognized option: $1"
                                 helphint $COMMAND
                                 exit 1
                             fi
                             ;;

        esac
        shift
    done

    # We need to know which container to run.
    if [[ -z $NAME ]]; then
        echo "Specify a container to start, e.g. $CONTAINER $COMMAND db"
        helphint $COMMAND
        exit 1
    fi

    # Docker image names are in the form "repo:tag". Let's split on the
    # colon and get both. If there's no tag, docker defaults to "latest".
    IFS=':' read REPO TAG <<< "$NAME"
    if [[ -z $TAG ]]; then
        TAG='latest'
    fi

    # If we have any volumes, let's expand the list into 
    # a bunch of "--volume $VOLUMES[$i]" options.
    for VOLUME in "${VOLUMES[@]}"; do
        VOLUME_OPTIONS="${VOLUME_OPTIONS} --volume ${VOLUME}"
    done

    # If we have any ports, let's expand the list into
    # a bunch of "--publish $PORTS[$i]" options.
    for PORT in "${PORTS[@]}"; do
        PORT_OPTIONS="${PORT_OPTIONS} --publish ${PORT}"
    done

    # If we have any links, let's exand the list into 
    # a bunch of "--link $LINKS[$i]" options.
    for LINK in "${LINKS[@]}"; do
        LINK_OPTIONS="${LINK_OPTIONS} --link ${LINK}"
    done

    # What log options should we use?
    # The standard json-file logger is fine, and we'll
    # put limits on the size and number of log files it creates.
    # (Note: these options seem to have no effect in my testing.)
    LOG_OPTIONS="--log-driver=json-file \
                 --log-opt max-size=2k \
                 --log-opt max-file=2 "

    # Now run the container.
    set -x
    docker run \
           -d \
           -it \
           --name "${REPO}_${TAG}" \
           $LOG_OPTIONS \
           $VOLUME_OPTIONS \
           $PORT_OPTIONS \
           $LINK_OPTIONS \
           $REPO:$TAG \
    { set +x; } 2>/dev/null

}

# A function to handle the "stop" command.
function stop {

    # Go through the options.
    while (( "$#" )); do
        case $1 in

            # The help option.
            -h|--help|help)  HELP=true
                             ;;

            # Any unrecognized options (starting with a dash).
            -*)              echo "Unrecognized option: $1"
                             helphint $COMMAND
                             exit 1
                             ;;

            # Anything else must be the NAME. But only the first time
            # we encounter it. A second option is unrecognized.
            *)             if [[ -z $NAME ]]; then
                               NAME=$1
                           else
                               echo "Unrecognized option: $1"
                               helphint $COMMAND
                               exit 1
                           fi
                           ;;

        esac
        shift
    done

    # We need to know which container to stop
    if [[ -z $NAME ]]; then
        echo "Specify a container to stop, e.g. $PROGRAM $COMMAND db"
        helphint $COMMAND
        exit 1
    fi

    # Docker image names are in the form "repo:tag". Let's split on the
    # colon and get both. If there's no tag, docker defaults to "latest".
    IFS=':' read REPO TAG <<< "$NAME"
    if [[ -z $TAG ]]; then
        TAG='latest'
    fi

    # Now stop the running container.
    set -x
    docker stop "${REPO}_${TAG}"
    docker rm "${REPO}_${TAG}"
    { set +x; } 2>/dev/null

}

# What's the name of this program?
PROGRAM=`basename $BASH_SOURCE`

# If no initial command was specified, say so and exit.
if [[ "$#" == "0" ]]; then
    echo "No command specified."
    helphint
    exit 1
fi

# What's the command that was specified?
case $1 in

    # The help option.
    -h|--help|help)  usage
                     exit 1
                     ;;

    # The "build" option -- builds a container image.
    build)           COMMAND="build" 
                     ;;

    # The "destroy" option -- destroys a container image.
    destroy)         COMMAND="destroy"
                     ;;

    # The "list" option -- lists all container images.
    list)            COMMAND="list"
                     ;;

    # The "start" option -- starts/runs a container.
    start)           COMMAND="start"
                     ;;

    # The "stop" option -- stop/kill a running container.
    stop)            COMMAND="stop"
                     ;;

    # The "ps" option -- lists all running containers.
    ps)              COMMAND="ps"
                     ;;

    # The "ip <name>" option -- gets the IP of a running container.
    ip)              COMMAND="ip"
                     shift
                     NAME="$1"
                     ;;

    # The "info <name>" option -- gets all info about a running container.
    info)            COMMAND="info"
                     shift
                     NAME="$1"
                     ;;

    # The "logs <name>" option -- tail the logs for a running container.
    logs)            COMMAND="logs"
                     shift
                     NAME="$1"
                     ;;

    # Anything else is unrecognized.
    *)               echo "Invalid first argument: '$1'"
                     helphint
                     exit 1
                     ;;

esac
shift


# Execute the command.
$COMMAND $@
